{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "236ab992-5eaa-456d-b39f-d117bc5bcce3",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "5. Write a Python Program to Remove Punctuation From a String?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69666ee6-a7f2-4163-b085-16ecd3bb6f8e",
   "metadata": {},
   "source": [
    "1. Write a Python Program to Add Two Matrices?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f115eb05-53fd-4850-9b67-0081ac6c1435",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10, 10, 10]\n",
      "[10, 10, 10]\n",
      "[10, 10, 10]\n"
     ]
    }
   ],
   "source": [
    "X = [[2,4,6],\n",
    "    [4,7,8],\n",
    "    [7,5,8]]\n",
    "\n",
    "Y = [[8,6,4],\n",
    "    [6,3,2],\n",
    "    [3,5,2]]\n",
    "\n",
    "result = [[0,0,0],\n",
    "        [0,0,0],\n",
    "        [0,0,0]]\n",
    "\n",
    "#iterate through rows \n",
    "for i in range(len(X)):\n",
    "#iterate through columns\n",
    "    for j in range(len(X[0])):\n",
    "        result[i][j] = X[i][j] + Y[i][j]\n",
    "        \n",
    "for r in result:\n",
    "    print(r)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a67085f2-4770-4ebd-83d6-0bd83184d090",
   "metadata": {},
   "source": [
    "2. Write a Python Program to Multiply Two Matrices?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "20f4a5f5-604d-4257-b8d9-001ee3df8a90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16, 24, 24]\n",
      "[24, 21, 16]\n",
      "[21, 25, 16]\n"
     ]
    }
   ],
   "source": [
    "X = [[2,4,6],\n",
    "    [4,7,8],\n",
    "    [7,5,8]]\n",
    "\n",
    "Y = [[8,6,4],\n",
    "    [6,3,2],\n",
    "    [3,5,2]]\n",
    "\n",
    "result = [[0,0,0],\n",
    "        [0,0,0],\n",
    "        [0,0,0]]\n",
    "\n",
    "#iterate through rows \n",
    "for i in range(len(X)):\n",
    "#iterate through columns\n",
    "    for j in range(len(X[0])):\n",
    "        result[i][j] = X[i][j] * Y[i][j]\n",
    "        \n",
    "for r in result:\n",
    "    print(r)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "942f7782-2475-47a5-84c9-3368f695a6a7",
   "metadata": {},
   "source": [
    "3. Write a Python Program to Transpose a Matrix?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c6892e4e-ffcd-4f88-a890-c44231d615a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result matrix is\n",
      "1  2  3  4  \n",
      "2  2  3  4  \n",
      "3  3  3  4  \n",
      "4  4  4  4  \n"
     ]
    }
   ],
   "source": [
    "# Python3 Program to find\n",
    "# transpose of a matrix\n",
    "\n",
    "N = 4\n",
    "\n",
    "# This function stores\n",
    "# transpose of A[][] in B[][]\n",
    "\n",
    "def transpose(A,B):\n",
    "    for i in range(N):\n",
    "        for j in range(N):\n",
    "            B[i][j] = A[j][i]\n",
    "\n",
    "# driver code\n",
    "A = [ [1, 1, 1, 1],\n",
    "[2, 2, 2, 2],\n",
    "[3, 3, 3, 3],\n",
    "[4, 4, 4, 4]]\n",
    "\n",
    "\n",
    "B = A[:][:] # To store result\n",
    "\n",
    "transpose(A, B)\n",
    "\n",
    "print(\"Result matrix is\")\n",
    "for i in range(N):\n",
    "    for j in range(N):\n",
    "        print(B[i][j], \" \", end='')\n",
    "    print()\n",
    "\n",
    "# This code is contributed by Anant Agarwal.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f1d9e66-921b-4895-8ba8-af063ae4e088",
   "metadata": {},
   "source": [
    "4. Write a Python Program to Sort Words in Alphabetic Order?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b5c4302c-18c5-4ecd-afee-422d805057fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "am from i ineuron\n"
     ]
    }
   ],
   "source": [
    "# Python3 program to sort the words of a\n",
    "# string in alphabetical order\n",
    "\n",
    "# Function to sort the words in alphabetical\n",
    "# order\n",
    "def F(S):\n",
    "\tW = S.split(\" \")\n",
    "\tfor i in range(len(W)):\n",
    "\t\tW[i] = W[i].lower()\n",
    "\tW.sort()\n",
    "\n",
    "\t# return the sorted words\n",
    "\treturn ' '.join(W)\n",
    "\n",
    "# Driver code\n",
    "S = \"I am From INEURON\"\n",
    "print(F(S))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9841f7d9-d9be-41e1-96ac-2957a1fdd576",
   "metadata": {},
   "source": [
    "5. Write a Python Program to Remove Punctuation From a String?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "eadcfc58-305e-457f-b884-e857e3cd6e33",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (354426021.py, line 6)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[43], line 6\u001b[0;36m\u001b[0m\n\u001b[0;31m    (str.maketrans('', '', string.punctuation))\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "import string\n",
    "\n",
    "test_str = 'Ineuron, is best: for ! Data science ;'\n",
    "\n",
    "test_str = test_str.translate\n",
    "    (str.maketrans('', '', string.punctuation))\n",
    "print(test_str)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33f3d9e7-c74a-4141-8749-18545202da57",
   "metadata": {},
   "outputs": [],
   "source": [
    "# initializing string\n",
    "test_str = \"Gfg, is best : for ! Geeks ;\"\n",
    "\n",
    "# printing original string\n",
    "print(\"The original string is : \" + test_str)\n",
    "\n",
    "# initializing punctuations string\n",
    "punc = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n",
    "\n",
    "# Removing punctuations in string\n",
    "# Using loop + punctuation string\n",
    "for ele in test_str:\n",
    "\tif ele in punc:\n",
    "\t\ttest_str = test_str.replace(ele, \"\")\n",
    "\n",
    "# printing result\n",
    "print(\"The string after punctuation filter : \" + test_str)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
