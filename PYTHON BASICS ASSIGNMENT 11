{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3fc07f27-8451-487c-9898-62fc4a34b03c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "11. What is the concept of a breakpoint?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2852ec02-caae-4d32-b791-af83ae3fc28f",
   "metadata": {},
   "source": [
    "1. Create an assert statement that throws an AssertionError if the variable spam is a negative\n",
    "integer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1ab50202-2173-4011-b778-f92a35a2acb8",
   "metadata": {},
   "outputs": [
    {
     "ename": "AssertionError",
     "evalue": "spam should not be a negative integer",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 6\u001b[0m\n\u001b[1;32m      3\u001b[0m spam \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m5\u001b[39m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Assert that spam is not a negative integer\u001b[39;00m\n\u001b[0;32m----> 6\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m spam \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mspam should not be a negative integer\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "\u001b[0;31mAssertionError\u001b[0m: spam should not be a negative integer"
     ]
    }
   ],
   "source": [
    "#Ans.\n",
    "# Assuming spam is a variable holding an integer value\n",
    "spam = -5\n",
    "\n",
    "# Assert that spam is not a negative integer\n",
    "assert spam >= 0, \"spam should not be a negative integer\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6199ac07-a449-4d34-918b-577a6d0a8f4f",
   "metadata": {},
   "source": [
    "In this code, the assert statement checks if the value of the variable spam is greater than or equal to zero. If the condition is False, it raises an AssertionError with the specified error message, indicating that the variable spam should not be a negative integer. If the condition is True, the assert statement passes silently, indicating that spam is not negative"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c83ca239-9b44-422b-826f-1cff6ab62c9f",
   "metadata": {},
   "source": [
    "2. Write an assert statement that triggers an AssertionError if the variables eggs and bacon contain\n",
    "strings that are the same as each other, even if their cases are different (that is, 'hello' and 'hello' are\n",
    "considered the same, and 'goodbye' and 'GOODbye' are also considered the same)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2acab002-631f-404c-ad98-cdd2f4dd60da",
   "metadata": {},
   "outputs": [
    {
     "ename": "AssertionError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[3], line 7\u001b[0m\n\u001b[1;32m      4\u001b[0m bacon \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhello\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m# Assert that eggs and bacon are not the same, ignoring case\u001b[39;00m\n\u001b[0;32m----> 7\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m eggs\u001b[38;5;241m.\u001b[39mlower() \u001b[38;5;241m!=\u001b[39m bacon\u001b[38;5;241m.\u001b[39mlower() \u001b[38;5;66;03m# \"eggs and bacon should not have the same string (ignoring case)\"\u001b[39;00m\n",
      "\u001b[0;31mAssertionError\u001b[0m: "
     ]
    }
   ],
   "source": [
    "#Ans\n",
    "# Assuming eggs and bacon are variables holding strings\n",
    "eggs = \"Hello\"\n",
    "bacon = \"hello\"\n",
    "\n",
    "# Assert that eggs and bacon are not the same, ignoring case\n",
    "assert eggs.lower() != bacon.lower() # \"eggs and bacon should not have the same string (ignoring case)\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2021cbd5-680b-46ca-b61a-8da5297c9f47",
   "metadata": {},
   "source": [
    "In this code, the assert statement uses the lower() method to convert both eggs and bacon to lowercase before comparing them. This ensures that their cases are ignored during the comparison. If the strings are the same, an AssertionError is raised with the specified error message, indicating that eggs and bacon should not have the same string, regardless of their case. If the strings are different, the assert statement passes silently."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96c34dc4-bfa2-4f09-bc18-5d26a475ffd8",
   "metadata": {},
   "source": [
    "3. Create an assert statement that throws an AssertionError every time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "27e8c894-397f-4d58-b54f-3175b7e476e2",
   "metadata": {},
   "outputs": [
    {
     "ename": "AssertionError",
     "evalue": "This assert statement always throws an AssertionError",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[4], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#Ans\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThis assert statement always throws an AssertionError\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "\u001b[0;31mAssertionError\u001b[0m: This assert statement always throws an AssertionError"
     ]
    }
   ],
   "source": [
    "#Ans\n",
    "assert False, \"This assert statement always throws an AssertionError\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec74b8a9-0366-433f-9708-32ccff1d30c9",
   "metadata": {},
   "source": [
    "This assert statement will always raise an AssertionError, regardless of the conditions or variables involved, because it directly checks the False condition. The provided error message will be displayed when the AssertionError is triggered."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47e3958f-ffc4-4965-8f61-b7847ef552bf",
   "metadata": {},
   "source": [
    "4. What are the two lines that must be present in your software in order to call logging.debug()?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dfa3042d-824c-4dc3-97f5-598a67b9132e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ans\n",
    "#To use the logging.debug() function in your software, you need to include the following two lines:\n",
    "import logging\n",
    "\n",
    "logging.basicConfig(level=logging.DEBUG)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f60c073f-fc8f-4ca9-9c5c-38c2e54a155d",
   "metadata": {},
   "source": [
    "The first line imports the logging module, which is necessary to access all the logging functions, including logging.debug().\n",
    "\n",
    "The second line configures the logging system and sets the logging level to DEBUG. This means that all log messages with a severity level of DEBUG or higher will be displayed. If you want to log messages with a higher severity level, such as INFO, WARNING, ERROR, or CRITICAL, you can adjust the logging level accordingly. For example, if you want to log messages from WARNING level and above, you can use logging.basicConfig(level=logging.WARNING)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e4b56ec-2eab-4018-9ff3-c6182da1d501",
   "metadata": {},
   "source": [
    "5. What are the two lines that your program must have in order to have logging.debug() send a\n",
    "logging message to a file named programLog.txt?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6656d2ac-81b9-4708-8645-4e6f8b846d4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ans\n",
    "import logging\n",
    "\n",
    "logging.basicConfig(filename='programLog.txt', level=logging.DEBUG)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12ce1590-8ba2-405e-bf9c-029e44050898",
   "metadata": {},
   "source": [
    "logging.basicConfig(filename='programLog.txt', level=logging.DEBUG): This line configures the logging system and sets the logging level to DEBUG. Additionally, it specifies the filename where the log messages will be written. In this case, it's set to \"programLog.txt.\" All log messages with a severity level of DEBUG or higher will be written to this file."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1bc31c9-66c0-4ebb-87f6-f522aeb0da3d",
   "metadata": {},
   "source": [
    "6. What are the five levels of logging?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20753672-8e66-4cd7-8350-9321a6ccd4c1",
   "metadata": {},
   "source": [
    "#Ans\n",
    "The logging module in Python defines five standard levels of logging, ordered by increasing severity. These five levels are:\n",
    "\n",
    "DEBUG: The DEBUG level is used for detailed information, typically helpful for debugging purposes. It provides the most verbose logging and is usually only enabled during development or when troubleshooting specific issues.\n",
    "\n",
    "INFO: The INFO level is used for general information about the program's execution. It is used to record significant events and milestones in the application's operation, giving an overview of what is happening.\n",
    "\n",
    "WARNING: The WARNING level is used to indicate potential issues that may not necessarily cause the program to fail but require attention. Warnings are usually logged when something unexpected happens, but the program can still continue to function.\n",
    "\n",
    "ERROR: The ERROR level is used to log errors that prevent certain parts of the program from functioning correctly. These errors typically indicate more severe issues but do not necessarily halt the entire program.\n",
    "\n",
    "CRITICAL: The CRITICAL level is the highest severity level. It is used to log critical errors that might cause the program to abort or crash. These messages signify severe issues that need immediate attention.\n",
    "\n",
    "When configuring the logging module, you can set the logging level to control which messages are logged and which are ignored. For example, if you set the level to WARNING, it will log warnings, errors, and critical messages, but not debug or info messages. The lower the logging level you set, the more messages will be recorded in the logs."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44a78b9b-3d2d-4031-a5d5-3c26798288d3",
   "metadata": {},
   "source": [
    "7. What line of code would you add to your software to disable all logging messages?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "53c19416-f99c-40c2-976e-1180664a6a70",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ans\n",
    "import logging\n",
    "\n",
    "logging.disable(logging.CRITICAL)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6faa837e-5718-4347-9222-b4e8c808a293",
   "metadata": {},
   "source": [
    "This line of code disables all logging messages with a severity level of CRITICAL or lower. Since CRITICAL is the highest severity level, all log messages, including errors, warnings, info, and debug messages, will be suppressed. This effectively disables all logging output."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97ba734f-846b-4c6c-ab87-959aea043a50",
   "metadata": {},
   "source": [
    "8. Why is using logging messages better than using print() to display the same message?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c134a4c-73a6-40f9-a156-0368f899b987",
   "metadata": {},
   "source": [
    "#Ans\n",
    "Using logging messages is generally better than using print() statements for displaying messages in a Python application due to several reasons:\n",
    "\n",
    "Log Levels and Verbosity: The logging module allows you to set different log levels, such as DEBUG, INFO, WARNING, ERROR, and CRITICAL. This enables you to control the verbosity of the messages displayed. During development, you might want detailed DEBUG messages, but in production, you can switch to a higher level like WARNING or ERROR to focus on important issues. With print(), you would need to manually add conditionals to control the verbosity, which can be error-prone.\n",
    "\n",
    "Flexibility and Configurability: The logging module provides great flexibility and configurability. You can specify the log format, redirect logs to different outputs (e.g., files, console, external services), and adjust the logging behavior at runtime without modifying the code. With print(), you have limited control over the output format and destination.\n",
    "\n",
    "Seamless Integration with Libraries and Frameworks: Many third-party libraries and frameworks use the logging module extensively. By adopting the logging module in your application, you ensure better compatibility and seamless integration with these external components.\n",
    "\n",
    "Filtering and Processing of Logs: The logging module allows you to apply filters and handlers to logs, enabling you to control what gets logged and how logs are processed. You can implement custom handlers to send logs to various locations (e.g., files, databases) or to integrate with external monitoring systems.\n",
    "\n",
    "Performance and Release Builds: When using print(), all messages are displayed, which can impact performance in production environments. With logging, you can easily disable or modify log levels for release builds, avoiding unnecessary overhead.\n",
    "\n",
    "Production-Ready Logging: The logging module is designed to be production-ready, handling multi-threading and concurrency gracefully. It provides built-in support for thread safety, which ensures that log messages from different threads do not interfere with each other."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85677457-f6a2-4315-bed8-8bf671dcd833",
   "metadata": {},
   "source": [
    "9. What are the differences between the Step Over, Step In, and Step Out buttons in the debugger?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aacdc34f-db22-433c-834e-8aa98eb10289",
   "metadata": {},
   "source": [
    "Ans\n",
    "\n",
    "Step Over: Execute the current line and move to the next line in the same function.\n",
    "\n",
    "Step In: Move to the next line and enter the first encountered function call to inspect its behavior.\n",
    "\n",
    "Step Out: Continue execution until the current function returns and stop at the caller function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a60744fb-5e53-40ac-b062-620efcee3ca5",
   "metadata": {},
   "source": [
    "10.After you click Continue, when will the debugger stop ?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae177e53-8b1c-437b-bf5a-fadfafe2a08c",
   "metadata": {},
   "source": [
    "Ans\n",
    "\n",
    "When you click the \"Continue\" button in the debugger, it instructs the debugger to resume the program's execution without any further interruption. The debugger will not stop until one of the following events occurs:\n",
    "\n",
    "Breakpoint Hit: If you have set breakpoints in your code, the debugger will pause the program's execution when it encounters a line of code associated with a breakpoint. Breakpoints allow you to stop at specific locations in your code to inspect the program's state and variables at that point.\n",
    "\n",
    "Exception Raised: If an unhandled exception is raised during the program's execution, the debugger will pause and stop at the point where the exception occurred. This allows you to examine the state of the program and the stack trace to understand the cause of the exception.\n",
    "\n",
    "End of Program: If the program successfully completes its execution, the debugger will stop when it reaches the end of the program. In this case, the debugger will typically display the final program output and the debugging session will end.\n",
    "\n",
    "It's important to note that when you click \"Continue,\" the debugger will not stop at every line of code. It will only pause when one of the above conditions is met, allowing you to investigate specific points of interest or handle unexpected situations during the program's execution. The \"Continue\" button essentially lets the program run freely until it encounters one of the stopping conditions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f379ac28-faf9-47f6-9a6f-9054d05069bd",
   "metadata": {},
   "source": [
    "11. What is the concept of a breakpoint?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c24bf2c7-cf66-4dd2-a6c8-cf0045afb8f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "Ans\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
