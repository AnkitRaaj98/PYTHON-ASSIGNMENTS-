{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d20ea229-506a-473e-84fe-d4b53f071ad5",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "6. Write a Python program to print all pronic numbers between 1 and 100?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41593b14-a2af-4c3f-bfb6-7649e06127ff",
   "metadata": {},
   "source": [
    "1. Write a Python program to check if the given number is a Disarium Number?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "76383506-9c20-4974-b331-bec8a0a5a11b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Disarium Number\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def check(n):\n",
    "    \n",
    "    count = len(str(n))\n",
    "    \n",
    "    sum = 0\n",
    "    x = n\n",
    "    while (x!=0):\n",
    "        \n",
    "        r = x%10\n",
    "        \n",
    "        sum = (int)(sum+math.pow(r, count))\n",
    "        count = count - 1\n",
    "        x = x//10\n",
    "        \n",
    "        \n",
    "    if sum == n:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "    \n",
    "n = 135\n",
    "if(check(n)==1):\n",
    "    print(\"Disarium Number\")\n",
    "else:\n",
    "    print(\"Not a Disarium Number\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4cec6fa-c1c0-4312-8244-909416e1c9a3",
   "metadata": {},
   "source": [
    "2. Write a Python program to print all disarium numbers between 1 to 100?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d9a3a96a-e403-4a37-8a0b-e4d69bbc2d24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DIsarium Number Between 1 to 100 are:\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "def cal_len(n):\n",
    "    length = 0\n",
    "    while(n!=0):\n",
    "        length = length + 1\n",
    "        n = n // 10\n",
    "        return length\n",
    "    \n",
    "def SumOfDigits(num):\n",
    "    rem = sum = 0\n",
    "    len = cal_len(num)\n",
    "    \n",
    "    while (num>0):\n",
    "        rem = num%10\n",
    "        sum = sum + (rem**len)\n",
    "        num = num//10\n",
    "        len = len - 1\n",
    "    return sum\n",
    "    \n",
    "result = 0\n",
    "\n",
    "print(\"DIsarium Number Between 1 to 100 are:\")\n",
    "\n",
    "for i in range(1,101):\n",
    "    result = SumOfDigits(i)\n",
    "    \n",
    "    if(result == i):\n",
    "        print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4bbdf4e-69aa-46ef-8278-3b483e05162c",
   "metadata": {},
   "source": [
    "3. Write a Python program to check if the given number is Happy Number?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "058c61de-e777-457b-98a9-843ffb041e11",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82 is a happy number\n"
     ]
    }
   ],
   "source": [
    "def isHappyNumber(num):    \n",
    "    rem = sum = 0;    \n",
    "        \n",
    "    #Calculates the sum of squares of digits    \n",
    "    while(num > 0):    \n",
    "        rem = num%10;    \n",
    "        sum = sum + (rem*rem);    \n",
    "        num = num//10;    \n",
    "    return sum;    \n",
    "        \n",
    "num = 82;    \n",
    "result = num;    \n",
    "     \n",
    "while(result != 1 and result != 4):    \n",
    "    result = isHappyNumber(result);    \n",
    "     \n",
    "#Happy number always ends with 1    \n",
    "if(result == 1):    \n",
    "    print(str(num) + \" is a happy number\");    \n",
    "#Unhappy number ends in a cycle of repeating numbers which contain 4    \n",
    "elif(result == 4):    \n",
    "    print(str(num) + \" is not a happy number\");   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27a4b3ec-21cc-4253-9ef5-db8c1d4f73a0",
   "metadata": {},
   "source": [
    "4. Write a Python program to print all happy numbers between 1 and 100?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "66db53bd-444b-4d40-a2d2-3e1e0a4653d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List of happy numbers between 1 and 100: \n",
      "1\n",
      " \n",
      "7\n",
      " \n",
      "10\n",
      " \n",
      "13\n",
      " \n",
      "19\n",
      " \n",
      "23\n",
      " \n",
      "28\n",
      " \n",
      "31\n",
      " \n",
      "32\n",
      " \n",
      "44\n",
      " \n",
      "49\n",
      " \n",
      "68\n",
      " \n",
      "70\n",
      " \n",
      "79\n",
      " \n",
      "82\n",
      " \n",
      "86\n",
      " \n",
      "91\n",
      " \n",
      "94\n",
      " \n",
      "97\n",
      " \n",
      "100\n",
      " \n"
     ]
    }
   ],
   "source": [
    "def isHappyNumber(num):  \n",
    "    rem = sum = 0  \n",
    "      \n",
    "   \n",
    "    while(num > 0):  \n",
    "        rem = num%10  \n",
    "        sum = sum + (rem*rem)  \n",
    "        num = num//10  \n",
    "    return sum  \n",
    "          \n",
    "print(\"List of happy numbers between 1 and 100: \")  \n",
    "for i in range(1, 101):  \n",
    "    result = i    \n",
    "     \n",
    "    while(result != 1 and result != 4):  \n",
    "        result = isHappyNumber(result);  \n",
    "      \n",
    "    if(result == 1):  \n",
    "        print(i),  \n",
    "        print(\" \"),  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56824acb-445e-4359-b578-592a17e8edb8",
   "metadata": {},
   "source": [
    "5. Write a Python program to determine whether the given number is a Harshad Number?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8ee3f669-3ec2-4c4b-842d-57a5bac4fc37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 24\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24 This is a Harshad Number\n"
     ]
    }
   ],
   "source": [
    "n = int(input())\n",
    "x = n\n",
    "sum = 0\n",
    "while(x > 0):\n",
    "    rem = x%10\n",
    "    sum = sum+rem\n",
    "    x = x//10\n",
    "if n%sum==0:\n",
    "    print(n, \"This is a Harshad Number\")\n",
    "else:\n",
    "    print(n, \"This isn't a Harshad Nuber\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4146b725-655c-4777-8eef-ef123bdb046e",
   "metadata": {},
   "source": [
    "6. Write a Python program to print all pronic numbers between 1 and 100?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4897b3fb-a298-44f9-bb2b-5d7c49ceda99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is a Pronic Number\n"
     ]
    }
   ],
   "source": [
    "n = int(input())\n",
    "flag=0\n",
    "for i in range(1,n+1):\n",
    "    if(i*(i+1)==n):\n",
    "        flag=1\n",
    "        break\n",
    "        \n",
    "if flag==1:\n",
    "    print(\"This is a Pronic Number\")\n",
    "else:\n",
    "    print(\"This is not a Pronic Number\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0cb71d54-5540-4222-93ba-968b974c712b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
